{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=8,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/train/train.json',\n        img_prefix='balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/val.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/val.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 590460511, "exp_name": "mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.027, "bbox_mAP_50": 0.0988, "bbox_mAP_75": 0.0001, "bbox_mAP_s": 0.0029, "bbox_mAP_m": 0.0335, "bbox_mAP_l": 0.0379, "bbox_mAP_copypaste": "0.0270 0.0988 0.0001 0.0029 0.0335 0.0379", "segm_mAP": 0.0379, "segm_mAP_50": 0.1177, "segm_mAP_75": 0.013, "segm_mAP_s": 0.0005, "segm_mAP_m": 0.0737, "segm_mAP_l": 0.0722, "segm_mAP_copypaste": "0.0379 0.1177 0.0130 0.0005 0.0737 0.0722"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.0589, "bbox_mAP_50": 0.1393, "bbox_mAP_75": 0.026, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0686, "bbox_mAP_l": 0.0713, "bbox_mAP_copypaste": "0.0589 0.1393 0.0260 0.0000 0.0686 0.0713", "segm_mAP": 0.0938, "segm_mAP_50": 0.1388, "segm_mAP_75": 0.1042, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0702, "segm_mAP_l": 0.1416, "segm_mAP_copypaste": "0.0938 0.1388 0.1042 0.0000 0.0702 0.1416"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00047, "bbox_mAP": 0.2884, "bbox_mAP_50": 0.3625, "bbox_mAP_75": 0.3487, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.169, "bbox_mAP_l": 0.3574, "bbox_mAP_copypaste": "0.2884 0.3625 0.3487 0.0000 0.1690 0.3574", "segm_mAP": 0.3149, "segm_mAP_50": 0.3716, "segm_mAP_75": 0.3586, "segm_mAP_s": 0.0027, "segm_mAP_m": 0.1233, "segm_mAP_l": 0.528, "segm_mAP_copypaste": "0.3149 0.3716 0.3586 0.0027 0.1233 0.5280"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00063, "bbox_mAP": 0.6236, "bbox_mAP_50": 0.7868, "bbox_mAP_75": 0.7039, "bbox_mAP_s": 0.0037, "bbox_mAP_m": 0.506, "bbox_mAP_l": 0.699, "bbox_mAP_copypaste": "0.6236 0.7868 0.7039 0.0037 0.5060 0.6990", "segm_mAP": 0.6996, "segm_mAP_50": 0.7814, "segm_mAP_75": 0.7745, "segm_mAP_s": 0.0062, "segm_mAP_m": 0.5393, "segm_mAP_l": 0.7896, "segm_mAP_copypaste": "0.6996 0.7814 0.7745 0.0062 0.5393 0.7896"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00079, "bbox_mAP": 0.6475, "bbox_mAP_50": 0.8454, "bbox_mAP_75": 0.7588, "bbox_mAP_s": 0.0091, "bbox_mAP_m": 0.6028, "bbox_mAP_l": 0.6976, "bbox_mAP_copypaste": "0.6475 0.8454 0.7588 0.0091 0.6028 0.6976", "segm_mAP": 0.7465, "segm_mAP_50": 0.8342, "segm_mAP_75": 0.8317, "segm_mAP_s": 0.0101, "segm_mAP_m": 0.6661, "segm_mAP_l": 0.8156, "segm_mAP_copypaste": "0.7465 0.8342 0.8317 0.0101 0.6661 0.8156"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00095, "bbox_mAP": 0.5311, "bbox_mAP_50": 0.8238, "bbox_mAP_75": 0.6267, "bbox_mAP_s": 0.0147, "bbox_mAP_m": 0.5666, "bbox_mAP_l": 0.5498, "bbox_mAP_copypaste": "0.5311 0.8238 0.6267 0.0147 0.5666 0.5498", "segm_mAP": 0.6987, "segm_mAP_50": 0.8121, "segm_mAP_75": 0.8092, "segm_mAP_s": 0.0117, "segm_mAP_m": 0.6395, "segm_mAP_l": 0.7565, "segm_mAP_copypaste": "0.6987 0.8121 0.8092 0.0117 0.6395 0.7565"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.6495, "bbox_mAP_50": 0.8592, "bbox_mAP_75": 0.8226, "bbox_mAP_s": 0.0333, "bbox_mAP_m": 0.585, "bbox_mAP_l": 0.6991, "bbox_mAP_copypaste": "0.6495 0.8592 0.8226 0.0333 0.5850 0.6991", "segm_mAP": 0.7584, "segm_mAP_50": 0.8408, "segm_mAP_75": 0.8366, "segm_mAP_s": 0.0328, "segm_mAP_m": 0.659, "segm_mAP_l": 0.8278, "segm_mAP_copypaste": "0.7584 0.8408 0.8366 0.0328 0.6590 0.8278"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00127, "bbox_mAP": 0.7207, "bbox_mAP_50": 0.8724, "bbox_mAP_75": 0.8342, "bbox_mAP_s": 0.0876, "bbox_mAP_m": 0.6333, "bbox_mAP_l": 0.7761, "bbox_mAP_copypaste": "0.7207 0.8724 0.8342 0.0876 0.6333 0.7761", "segm_mAP": 0.7809, "segm_mAP_50": 0.8544, "segm_mAP_75": 0.85, "segm_mAP_s": 0.0856, "segm_mAP_m": 0.6834, "segm_mAP_l": 0.8371, "segm_mAP_copypaste": "0.7809 0.8544 0.8500 0.0856 0.6834 0.8371"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00014, "bbox_mAP": 0.7271, "bbox_mAP_50": 0.8737, "bbox_mAP_75": 0.8352, "bbox_mAP_s": 0.097, "bbox_mAP_m": 0.6323, "bbox_mAP_l": 0.7843, "bbox_mAP_copypaste": "0.7271 0.8737 0.8352 0.0970 0.6323 0.7843", "segm_mAP": 0.7836, "segm_mAP_50": 0.8558, "segm_mAP_75": 0.8513, "segm_mAP_s": 0.0959, "segm_mAP_m": 0.6819, "segm_mAP_l": 0.8397, "segm_mAP_copypaste": "0.7836 0.8558 0.8513 0.0959 0.6819 0.8397"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00016, "bbox_mAP": 0.7372, "bbox_mAP_50": 0.8743, "bbox_mAP_75": 0.8365, "bbox_mAP_s": 0.1087, "bbox_mAP_m": 0.6445, "bbox_mAP_l": 0.7951, "bbox_mAP_copypaste": "0.7372 0.8743 0.8365 0.1087 0.6445 0.7951", "segm_mAP": 0.7892, "segm_mAP_50": 0.8573, "segm_mAP_75": 0.8526, "segm_mAP_s": 0.0986, "segm_mAP_m": 0.6883, "segm_mAP_l": 0.8439, "segm_mAP_copypaste": "0.7892 0.8573 0.8526 0.0986 0.6883 0.8439"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00017, "bbox_mAP": 0.738, "bbox_mAP_50": 0.876, "bbox_mAP_75": 0.8377, "bbox_mAP_s": 0.1054, "bbox_mAP_m": 0.6499, "bbox_mAP_l": 0.7941, "bbox_mAP_copypaste": "0.7380 0.8760 0.8377 0.1054 0.6499 0.7941", "segm_mAP": 0.793, "segm_mAP_50": 0.8587, "segm_mAP_75": 0.8541, "segm_mAP_s": 0.0856, "segm_mAP_m": 0.6955, "segm_mAP_l": 0.8475, "segm_mAP_copypaste": "0.7930 0.8587 0.8541 0.0856 0.6955 0.8475"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00019, "bbox_mAP": 0.7327, "bbox_mAP_50": 0.8859, "bbox_mAP_75": 0.8444, "bbox_mAP_s": 0.1027, "bbox_mAP_m": 0.6517, "bbox_mAP_l": 0.7847, "bbox_mAP_copypaste": "0.7327 0.8859 0.8444 0.1027 0.6517 0.7847", "segm_mAP": 0.7921, "segm_mAP_50": 0.8639, "segm_mAP_75": 0.8616, "segm_mAP_s": 0.0796, "segm_mAP_m": 0.7001, "segm_mAP_l": 0.8481, "segm_mAP_copypaste": "0.7921 0.8639 0.8616 0.0796 0.7001 0.8481"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.00021, "bbox_mAP": 0.7285, "bbox_mAP_50": 0.8788, "bbox_mAP_75": 0.8385, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.6673, "bbox_mAP_l": 0.778, "bbox_mAP_copypaste": "0.7285 0.8788 0.8385 0.0505 0.6673 0.7780", "segm_mAP": 0.7913, "segm_mAP_50": 0.8704, "segm_mAP_75": 0.8615, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.6958, "segm_mAP_l": 0.8502, "segm_mAP_copypaste": "0.7913 0.8704 0.8615 0.0442 0.6958 0.8502"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.00022, "bbox_mAP": 0.7462, "bbox_mAP_50": 0.8816, "bbox_mAP_75": 0.8405, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.6725, "bbox_mAP_l": 0.7993, "bbox_mAP_copypaste": "0.7462 0.8816 0.8405 0.0505 0.6725 0.7993", "segm_mAP": 0.7941, "segm_mAP_50": 0.8638, "segm_mAP_75": 0.8638, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.6981, "segm_mAP_l": 0.8529, "segm_mAP_copypaste": "0.7941 0.8638 0.8638 0.0442 0.6981 0.8529"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.00024, "bbox_mAP": 0.7394, "bbox_mAP_50": 0.8819, "bbox_mAP_75": 0.8413, "bbox_mAP_s": 0.0404, "bbox_mAP_m": 0.6614, "bbox_mAP_l": 0.7966, "bbox_mAP_copypaste": "0.7394 0.8819 0.8413 0.0404 0.6614 0.7966", "segm_mAP": 0.798, "segm_mAP_50": 0.8647, "segm_mAP_75": 0.8647, "segm_mAP_s": 0.0442, "segm_mAP_m": 0.7018, "segm_mAP_l": 0.8576, "segm_mAP_copypaste": "0.7980 0.8647 0.8647 0.0442 0.7018 0.8576"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.00025, "bbox_mAP": 0.748, "bbox_mAP_50": 0.8829, "bbox_mAP_75": 0.8427, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.681, "bbox_mAP_l": 0.8027, "bbox_mAP_copypaste": "0.7480 0.8829 0.8427 0.0337 0.6810 0.8027", "segm_mAP": 0.7963, "segm_mAP_50": 0.866, "segm_mAP_75": 0.866, "segm_mAP_s": 0.0393, "segm_mAP_m": 0.7001, "segm_mAP_l": 0.855, "segm_mAP_copypaste": "0.7963 0.8660 0.8660 0.0393 0.7001 0.8550"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.00027, "bbox_mAP": 0.7462, "bbox_mAP_50": 0.883, "bbox_mAP_75": 0.8195, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.6904, "bbox_mAP_l": 0.7988, "bbox_mAP_copypaste": "0.7462 0.8830 0.8195 0.0337 0.6904 0.7988", "segm_mAP": 0.8007, "segm_mAP_50": 0.8672, "segm_mAP_75": 0.8672, "segm_mAP_s": 0.0393, "segm_mAP_m": 0.7061, "segm_mAP_l": 0.8592, "segm_mAP_copypaste": "0.8007 0.8672 0.8672 0.0393 0.7061 0.8592"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.00029, "bbox_mAP": 0.7443, "bbox_mAP_50": 0.8835, "bbox_mAP_75": 0.8193, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.6692, "bbox_mAP_l": 0.8024, "bbox_mAP_copypaste": "0.7443 0.8835 0.8193 0.0337 0.6692 0.8024", "segm_mAP": 0.8011, "segm_mAP_50": 0.8677, "segm_mAP_75": 0.8677, "segm_mAP_s": 0.0393, "segm_mAP_m": 0.7039, "segm_mAP_l": 0.8599, "segm_mAP_copypaste": "0.8011 0.8677 0.8677 0.0393 0.7039 0.8599"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.7555, "bbox_mAP_50": 0.8832, "bbox_mAP_75": 0.8433, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.6818, "bbox_mAP_l": 0.8123, "bbox_mAP_copypaste": "0.7555 0.8832 0.8433 0.0337 0.6818 0.8123", "segm_mAP": 0.7992, "segm_mAP_50": 0.8669, "segm_mAP_75": 0.8669, "segm_mAP_s": 0.0393, "segm_mAP_m": 0.6986, "segm_mAP_l": 0.8589, "segm_mAP_copypaste": "0.7992 0.8669 0.8669 0.0393 0.6986 0.8589"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.00032, "bbox_mAP": 0.7555, "bbox_mAP_50": 0.8954, "bbox_mAP_75": 0.8447, "bbox_mAP_s": 0.1502, "bbox_mAP_m": 0.6716, "bbox_mAP_l": 0.8097, "bbox_mAP_copypaste": "0.7555 0.8954 0.8447 0.1502 0.6716 0.8097", "segm_mAP": 0.8037, "segm_mAP_50": 0.8729, "segm_mAP_75": 0.8729, "segm_mAP_s": 0.1389, "segm_mAP_m": 0.6986, "segm_mAP_l": 0.8612, "segm_mAP_copypaste": "0.8037 0.8729 0.8729 0.1389 0.6986 0.8612"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.00033, "bbox_mAP": 0.7622, "bbox_mAP_50": 0.8955, "bbox_mAP_75": 0.8449, "bbox_mAP_s": 0.1768, "bbox_mAP_m": 0.6747, "bbox_mAP_l": 0.8159, "bbox_mAP_copypaste": "0.7622 0.8955 0.8449 0.1768 0.6747 0.8159", "segm_mAP": 0.8014, "segm_mAP_50": 0.8731, "segm_mAP_75": 0.8731, "segm_mAP_s": 0.1563, "segm_mAP_m": 0.6848, "segm_mAP_l": 0.8614, "segm_mAP_copypaste": "0.8014 0.8731 0.8731 0.1563 0.6848 0.8614"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.00035, "bbox_mAP": 0.7574, "bbox_mAP_50": 0.8969, "bbox_mAP_75": 0.8449, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6733, "bbox_mAP_l": 0.8106, "bbox_mAP_copypaste": "0.7574 0.8969 0.8449 0.2054 0.6733 0.8106", "segm_mAP": 0.8038, "segm_mAP_50": 0.8733, "segm_mAP_75": 0.8733, "segm_mAP_s": 0.1654, "segm_mAP_m": 0.6906, "segm_mAP_l": 0.8598, "segm_mAP_copypaste": "0.8038 0.8733 0.8733 0.1654 0.6906 0.8598"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.00037, "bbox_mAP": 0.7807, "bbox_mAP_50": 0.8983, "bbox_mAP_75": 0.8658, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6798, "bbox_mAP_l": 0.839, "bbox_mAP_copypaste": "0.7807 0.8983 0.8658 0.2054 0.6798 0.8390", "segm_mAP": 0.8045, "segm_mAP_50": 0.8746, "segm_mAP_75": 0.8746, "segm_mAP_s": 0.1474, "segm_mAP_m": 0.6954, "segm_mAP_l": 0.8614, "segm_mAP_copypaste": "0.8045 0.8746 0.8746 0.1474 0.6954 0.8614"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.00038, "bbox_mAP": 0.7741, "bbox_mAP_50": 0.9, "bbox_mAP_75": 0.8476, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6657, "bbox_mAP_l": 0.8348, "bbox_mAP_copypaste": "0.7741 0.9000 0.8476 0.2054 0.6657 0.8348", "segm_mAP": 0.8075, "segm_mAP_50": 0.8764, "segm_mAP_75": 0.8764, "segm_mAP_s": 0.1654, "segm_mAP_m": 0.6956, "segm_mAP_l": 0.8654, "segm_mAP_copypaste": "0.8075 0.8764 0.8764 0.1654 0.6956 0.8654"}
{"mode": "val", "epoch": 25, "iter": 13, "lr": 0.0004, "bbox_mAP": 0.7741, "bbox_mAP_50": 0.9007, "bbox_mAP_75": 0.8479, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6657, "bbox_mAP_l": 0.8344, "bbox_mAP_copypaste": "0.7741 0.9007 0.8479 0.2054 0.6657 0.8344", "segm_mAP": 0.8093, "segm_mAP_50": 0.8769, "segm_mAP_75": 0.8769, "segm_mAP_s": 0.1654, "segm_mAP_m": 0.6969, "segm_mAP_l": 0.8674, "segm_mAP_copypaste": "0.8093 0.8769 0.8769 0.1654 0.6969 0.8674"}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 0.00041, "bbox_mAP": 0.7764, "bbox_mAP_50": 0.9018, "bbox_mAP_75": 0.8686, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.686, "bbox_mAP_l": 0.8338, "bbox_mAP_copypaste": "0.7764 0.9018 0.8686 0.2054 0.6860 0.8338", "segm_mAP": 0.8103, "segm_mAP_50": 0.8782, "segm_mAP_75": 0.8782, "segm_mAP_s": 0.1654, "segm_mAP_m": 0.7031, "segm_mAP_l": 0.8661, "segm_mAP_copypaste": "0.8103 0.8782 0.8782 0.1654 0.7031 0.8661"}
{"mode": "val", "epoch": 27, "iter": 13, "lr": 0.00043, "bbox_mAP": 0.7799, "bbox_mAP_50": 0.9014, "bbox_mAP_75": 0.8687, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6847, "bbox_mAP_l": 0.8387, "bbox_mAP_copypaste": "0.7799 0.9014 0.8687 0.2054 0.6847 0.8387", "segm_mAP": 0.8101, "segm_mAP_50": 0.8778, "segm_mAP_75": 0.8778, "segm_mAP_s": 0.1654, "segm_mAP_m": 0.7008, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.8101 0.8778 0.8778 0.1654 0.7008 0.8665"}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 0.00045, "bbox_mAP": 0.7824, "bbox_mAP_50": 0.9027, "bbox_mAP_75": 0.8701, "bbox_mAP_s": 0.2054, "bbox_mAP_m": 0.6808, "bbox_mAP_l": 0.845, "bbox_mAP_copypaste": "0.7824 0.9027 0.8701 0.2054 0.6808 0.8450", "segm_mAP": 0.812, "segm_mAP_50": 0.8793, "segm_mAP_75": 0.8793, "segm_mAP_s": 0.175, "segm_mAP_m": 0.7068, "segm_mAP_l": 0.8686, "segm_mAP_copypaste": "0.8120 0.8793 0.8793 0.1750 0.7068 0.8686"}
{"mode": "val", "epoch": 29, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.7805, "bbox_mAP_50": 0.9028, "bbox_mAP_75": 0.8699, "bbox_mAP_s": 0.2252, "bbox_mAP_m": 0.6912, "bbox_mAP_l": 0.8384, "bbox_mAP_copypaste": "0.7805 0.9028 0.8699 0.2252 0.6912 0.8384", "segm_mAP": 0.8096, "segm_mAP_50": 0.8786, "segm_mAP_75": 0.8786, "segm_mAP_s": 0.175, "segm_mAP_m": 0.7068, "segm_mAP_l": 0.865, "segm_mAP_copypaste": "0.8096 0.8786 0.8786 0.1750 0.7068 0.8650"}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 0.00048, "bbox_mAP": 0.7838, "bbox_mAP_50": 0.8926, "bbox_mAP_75": 0.8506, "bbox_mAP_s": 0.0673, "bbox_mAP_m": 0.7004, "bbox_mAP_l": 0.8458, "bbox_mAP_copypaste": "0.7838 0.8926 0.8506 0.0673 0.7004 0.8458", "segm_mAP": 0.809, "segm_mAP_50": 0.8752, "segm_mAP_75": 0.8752, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.7091, "segm_mAP_l": 0.8686, "segm_mAP_copypaste": "0.8090 0.8752 0.8752 0.0505 0.7091 0.8686"}
{"mode": "val", "epoch": 31, "iter": 13, "lr": 0.00049, "bbox_mAP": 0.7667, "bbox_mAP_50": 0.8932, "bbox_mAP_75": 0.8714, "bbox_mAP_s": 0.0673, "bbox_mAP_m": 0.6754, "bbox_mAP_l": 0.8304, "bbox_mAP_copypaste": "0.7667 0.8932 0.8714 0.0673 0.6754 0.8304", "segm_mAP": 0.8106, "segm_mAP_50": 0.8759, "segm_mAP_75": 0.8759, "segm_mAP_s": 0.0606, "segm_mAP_m": 0.7109, "segm_mAP_l": 0.8717, "segm_mAP_copypaste": "0.8106 0.8759 0.8759 0.0606 0.7109 0.8717"}
{"mode": "val", "epoch": 32, "iter": 13, "lr": 0.00051, "bbox_mAP": 0.7862, "bbox_mAP_50": 0.8923, "bbox_mAP_75": 0.8774, "bbox_mAP_s": 0.1178, "bbox_mAP_m": 0.7014, "bbox_mAP_l": 0.8444, "bbox_mAP_copypaste": "0.7862 0.8923 0.8774 0.1178 0.7014 0.8444", "segm_mAP": 0.8087, "segm_mAP_50": 0.8747, "segm_mAP_75": 0.8747, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.7006, "segm_mAP_l": 0.8676, "segm_mAP_copypaste": "0.8087 0.8747 0.8747 0.0673 0.7006 0.8676"}
{"mode": "val", "epoch": 33, "iter": 13, "lr": 0.00053, "bbox_mAP": 0.7683, "bbox_mAP_50": 0.8933, "bbox_mAP_75": 0.8507, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.695, "bbox_mAP_l": 0.8268, "bbox_mAP_copypaste": "0.7683 0.8933 0.8507 0.1010 0.6950 0.8268", "segm_mAP": 0.8172, "segm_mAP_50": 0.876, "segm_mAP_75": 0.876, "segm_mAP_s": 0.0884, "segm_mAP_m": 0.7048, "segm_mAP_l": 0.8811, "segm_mAP_copypaste": "0.8172 0.8760 0.8760 0.0884 0.7048 0.8811"}
{"mode": "val", "epoch": 34, "iter": 13, "lr": 0.00054, "bbox_mAP": 0.787, "bbox_mAP_50": 0.8932, "bbox_mAP_75": 0.8785, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.7, "bbox_mAP_l": 0.8493, "bbox_mAP_copypaste": "0.7870 0.8932 0.8785 0.1767 0.7000 0.8493", "segm_mAP": 0.8089, "segm_mAP_50": 0.8763, "segm_mAP_75": 0.8763, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.7075, "segm_mAP_l": 0.8675, "segm_mAP_copypaste": "0.8089 0.8763 0.8763 0.0808 0.7075 0.8675"}
{"mode": "val", "epoch": 35, "iter": 13, "lr": 0.00056, "bbox_mAP": 0.7817, "bbox_mAP_50": 0.8947, "bbox_mAP_75": 0.8725, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.7, "bbox_mAP_l": 0.8447, "bbox_mAP_copypaste": "0.7817 0.8947 0.8725 0.1010 0.7000 0.8447", "segm_mAP": 0.8051, "segm_mAP_50": 0.8774, "segm_mAP_75": 0.8774, "segm_mAP_s": 0.0606, "segm_mAP_m": 0.6922, "segm_mAP_l": 0.8701, "segm_mAP_copypaste": "0.8051 0.8774 0.8774 0.0606 0.6922 0.8701"}
{"mode": "val", "epoch": 36, "iter": 13, "lr": 0.00057, "bbox_mAP": 0.7887, "bbox_mAP_50": 0.8945, "bbox_mAP_75": 0.8798, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.6999, "bbox_mAP_l": 0.85, "bbox_mAP_copypaste": "0.7887 0.8945 0.8798 0.1767 0.6999 0.8500", "segm_mAP": 0.8116, "segm_mAP_50": 0.8772, "segm_mAP_75": 0.8772, "segm_mAP_s": 0.0909, "segm_mAP_m": 0.7042, "segm_mAP_l": 0.8704, "segm_mAP_copypaste": "0.8116 0.8772 0.8772 0.0909 0.7042 0.8704"}
{"mode": "val", "epoch": 37, "iter": 13, "lr": 0.00059, "bbox_mAP": 0.7713, "bbox_mAP_50": 0.8907, "bbox_mAP_75": 0.8724, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.7, "bbox_mAP_l": 0.824, "bbox_mAP_copypaste": "0.7713 0.8907 0.8724 0.1767 0.7000 0.8240", "segm_mAP": 0.8086, "segm_mAP_50": 0.8698, "segm_mAP_75": 0.8698, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.706, "segm_mAP_l": 0.8627, "segm_mAP_copypaste": "0.8086 0.8698 0.8698 0.0808 0.7060 0.8627"}
{"mode": "val", "epoch": 38, "iter": 13, "lr": 0.00061, "bbox_mAP": 0.7807, "bbox_mAP_50": 0.8906, "bbox_mAP_75": 0.8651, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.6942, "bbox_mAP_l": 0.8394, "bbox_mAP_copypaste": "0.7807 0.8906 0.8651 0.0757 0.6942 0.8394", "segm_mAP": 0.8045, "segm_mAP_50": 0.8906, "segm_mAP_75": 0.8688, "segm_mAP_s": 0.0606, "segm_mAP_m": 0.702, "segm_mAP_l": 0.86, "segm_mAP_copypaste": "0.8045 0.8906 0.8688 0.0606 0.7020 0.8600"}
{"mode": "val", "epoch": 39, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.7811, "bbox_mAP_50": 0.8905, "bbox_mAP_75": 0.8721, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.6935, "bbox_mAP_l": 0.8376, "bbox_mAP_copypaste": "0.7811 0.8905 0.8721 0.1767 0.6935 0.8376", "segm_mAP": 0.8062, "segm_mAP_50": 0.8687, "segm_mAP_75": 0.8687, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.7, "segm_mAP_l": 0.8602, "segm_mAP_copypaste": "0.8062 0.8687 0.8687 0.0808 0.7000 0.8602"}
{"mode": "val", "epoch": 40, "iter": 13, "lr": 0.00064, "bbox_mAP": 0.7734, "bbox_mAP_50": 0.8915, "bbox_mAP_75": 0.8735, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.6922, "bbox_mAP_l": 0.8258, "bbox_mAP_copypaste": "0.7734 0.8915 0.8735 0.1767 0.6922 0.8258", "segm_mAP": 0.8111, "segm_mAP_50": 0.8704, "segm_mAP_75": 0.8704, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.7035, "segm_mAP_l": 0.8636, "segm_mAP_copypaste": "0.8111 0.8704 0.8704 0.0808 0.7035 0.8636"}
{"mode": "val", "epoch": 41, "iter": 13, "lr": 0.00065, "bbox_mAP": 0.7849, "bbox_mAP_50": 0.8909, "bbox_mAP_75": 0.8729, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6877, "bbox_mAP_l": 0.8413, "bbox_mAP_copypaste": "0.7849 0.8909 0.8729 0.1010 0.6877 0.8413", "segm_mAP": 0.8074, "segm_mAP_50": 0.8909, "segm_mAP_75": 0.8702, "segm_mAP_s": 0.0757, "segm_mAP_m": 0.6959, "segm_mAP_l": 0.8604, "segm_mAP_copypaste": "0.8074 0.8909 0.8702 0.0757 0.6959 0.8604"}
{"mode": "val", "epoch": 42, "iter": 13, "lr": 0.00067, "bbox_mAP": 0.7782, "bbox_mAP_50": 0.8914, "bbox_mAP_75": 0.8717, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6865, "bbox_mAP_l": 0.8356, "bbox_mAP_copypaste": "0.7782 0.8914 0.8717 0.1010 0.6865 0.8356", "segm_mAP": 0.8091, "segm_mAP_50": 0.8707, "segm_mAP_75": 0.8707, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.6988, "segm_mAP_l": 0.8636, "segm_mAP_copypaste": "0.8091 0.8707 0.8707 0.0673 0.6988 0.8636"}
{"mode": "val", "epoch": 43, "iter": 13, "lr": 0.00069, "bbox_mAP": 0.781, "bbox_mAP_50": 0.8911, "bbox_mAP_75": 0.8727, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6835, "bbox_mAP_l": 0.8367, "bbox_mAP_copypaste": "0.7810 0.8911 0.8727 0.1010 0.6835 0.8367", "segm_mAP": 0.8071, "segm_mAP_50": 0.8692, "segm_mAP_75": 0.8692, "segm_mAP_s": 0.0649, "segm_mAP_m": 0.6845, "segm_mAP_l": 0.8636, "segm_mAP_copypaste": "0.8071 0.8692 0.8692 0.0649 0.6845 0.8636"}
{"mode": "val", "epoch": 44, "iter": 13, "lr": 0.0007, "bbox_mAP": 0.7876, "bbox_mAP_50": 0.8906, "bbox_mAP_75": 0.8713, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6932, "bbox_mAP_l": 0.8433, "bbox_mAP_copypaste": "0.7876 0.8906 0.8713 0.1010 0.6932 0.8433", "segm_mAP": 0.8112, "segm_mAP_50": 0.8906, "segm_mAP_75": 0.8695, "segm_mAP_s": 0.0757, "segm_mAP_m": 0.6872, "segm_mAP_l": 0.8675, "segm_mAP_copypaste": "0.8112 0.8906 0.8695 0.0757 0.6872 0.8675"}
{"mode": "val", "epoch": 45, "iter": 13, "lr": 0.00072, "bbox_mAP": 0.7871, "bbox_mAP_50": 0.8926, "bbox_mAP_75": 0.8739, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.6971, "bbox_mAP_l": 0.8424, "bbox_mAP_copypaste": "0.7871 0.8926 0.8739 0.1010 0.6971 0.8424", "segm_mAP": 0.807, "segm_mAP_50": 0.8702, "segm_mAP_75": 0.8702, "segm_mAP_s": 0.0757, "segm_mAP_m": 0.683, "segm_mAP_l": 0.8618, "segm_mAP_copypaste": "0.8070 0.8702 0.8702 0.0757 0.6830 0.8618"}
{"mode": "val", "epoch": 46, "iter": 13, "lr": 0.00073, "bbox_mAP": 0.791, "bbox_mAP_50": 0.8938, "bbox_mAP_75": 0.8751, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.7015, "bbox_mAP_l": 0.8451, "bbox_mAP_copypaste": "0.7910 0.8938 0.8751 0.1767 0.7015 0.8451", "segm_mAP": 0.8065, "segm_mAP_50": 0.8708, "segm_mAP_75": 0.8708, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.691, "segm_mAP_l": 0.8617, "segm_mAP_copypaste": "0.8065 0.8708 0.8708 0.0673 0.6910 0.8617"}
{"mode": "val", "epoch": 47, "iter": 13, "lr": 0.00075, "bbox_mAP": 0.7831, "bbox_mAP_50": 0.8949, "bbox_mAP_75": 0.8758, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.6867, "bbox_mAP_l": 0.8338, "bbox_mAP_copypaste": "0.7831 0.8949 0.8758 0.1767 0.6867 0.8338", "segm_mAP": 0.8144, "segm_mAP_50": 0.8731, "segm_mAP_75": 0.8731, "segm_mAP_s": 0.101, "segm_mAP_m": 0.6892, "segm_mAP_l": 0.8699, "segm_mAP_copypaste": "0.8144 0.8731 0.8731 0.1010 0.6892 0.8699"}
{"mode": "val", "epoch": 48, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7852, "bbox_mAP_50": 0.8954, "bbox_mAP_75": 0.8763, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.698, "bbox_mAP_l": 0.8389, "bbox_mAP_copypaste": "0.7852 0.8954 0.8763 0.1515 0.6980 0.8389", "segm_mAP": 0.8067, "segm_mAP_50": 0.8726, "segm_mAP_75": 0.8726, "segm_mAP_s": 0.0909, "segm_mAP_m": 0.6978, "segm_mAP_l": 0.8586, "segm_mAP_copypaste": "0.8067 0.8726 0.8726 0.0909 0.6978 0.8586"}
{"mode": "val", "epoch": 49, "iter": 13, "lr": 0.00078, "bbox_mAP": 0.7744, "bbox_mAP_50": 0.8948, "bbox_mAP_75": 0.8753, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.6744, "bbox_mAP_l": 0.8329, "bbox_mAP_copypaste": "0.7744 0.8948 0.8753 0.1515 0.6744 0.8329", "segm_mAP": 0.8041, "segm_mAP_50": 0.8722, "segm_mAP_75": 0.8722, "segm_mAP_s": 0.0808, "segm_mAP_m": 0.6981, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.8041 0.8722 0.8722 0.0808 0.6981 0.8557"}
{"mode": "val", "epoch": 50, "iter": 13, "lr": 0.0008, "bbox_mAP": 0.7693, "bbox_mAP_50": 0.8925, "bbox_mAP_75": 0.8626, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.662, "bbox_mAP_l": 0.83, "bbox_mAP_copypaste": "0.7693 0.8925 0.8626 0.0757 0.6620 0.8300", "segm_mAP": 0.8039, "segm_mAP_50": 0.8711, "segm_mAP_75": 0.8711, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.6778, "segm_mAP_l": 0.8614, "segm_mAP_copypaste": "0.8039 0.8711 0.8711 0.0505 0.6778 0.8614"}
