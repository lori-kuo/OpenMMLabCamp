{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=20,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = 'VOC2007/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file='VOC2007/ImageSets/Main/trainval.txt',\n            img_prefix='VOC2007/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file='VOC2007/ImageSets/Main/val.txt',\n        img_prefix='VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='VOC2007/ImageSets/Main/test.txt',\n        img_prefix='VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\noptimizer = dict(type='SGD', lr=0.00125, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[3])\nrunner = dict(type='EpochBasedRunner', max_epochs=4)\nwork_dir = './work_dirs/advanced'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1577603529, "exp_name": "advanced.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00125, "memory": 12221, "data_time": 0.07041, "loss_cls": 1.14987, "loss_bbox": 0.66094, "loss": 1.81081, "time": 0.71381}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00125, "memory": 12221, "data_time": 0.01835, "loss_cls": 1.14872, "loss_bbox": 0.65009, "loss": 1.79881, "time": 0.63239}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00125, "memory": 12221, "data_time": 0.01889, "loss_cls": 1.14848, "loss_bbox": 0.64595, "loss": 1.79443, "time": 0.63916}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00125, "memory": 12221, "data_time": 0.01801, "loss_cls": 1.14176, "loss_bbox": 0.63547, "loss": 1.77723, "time": 0.62759}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00125, "memory": 12221, "data_time": 0.01823, "loss_cls": 1.12403, "loss_bbox": 0.63569, "loss": 1.75972, "time": 0.64055}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00125, "memory": 12221, "data_time": 0.01824, "loss_cls": 0.93989, "loss_bbox": 0.62225, "loss": 1.56214, "time": 0.64059}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00125, "memory": 12221, "data_time": 0.01802, "loss_cls": 0.76243, "loss_bbox": 0.59358, "loss": 1.35601, "time": 0.62495}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00125, "memory": 12221, "data_time": 0.01791, "loss_cls": 0.72445, "loss_bbox": 0.56999, "loss": 1.29444, "time": 0.63597}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00125, "memory": 12221, "data_time": 0.02037, "loss_cls": 0.67563, "loss_bbox": 0.54416, "loss": 1.21979, "time": 0.6453}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00125, "memory": 12221, "data_time": 0.01866, "loss_cls": 0.65124, "loss_bbox": 0.51833, "loss": 1.16957, "time": 0.63177}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00125, "memory": 12221, "data_time": 0.01869, "loss_cls": 0.64918, "loss_bbox": 0.50433, "loss": 1.15351, "time": 0.63912}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00125, "memory": 12221, "data_time": 0.01784, "loss_cls": 0.6366, "loss_bbox": 0.49046, "loss": 1.12706, "time": 0.62746}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00125, "memory": 12221, "data_time": 0.01861, "loss_cls": 0.59968, "loss_bbox": 0.47178, "loss": 1.07146, "time": 0.63148}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00125, "memory": 12221, "data_time": 0.01785, "loss_cls": 0.60162, "loss_bbox": 0.47008, "loss": 1.0717, "time": 0.62979}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00125, "memory": 12221, "data_time": 0.01884, "loss_cls": 0.57606, "loss_bbox": 0.45992, "loss": 1.03598, "time": 0.64334}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00125, "memory": 12221, "data_time": 0.01778, "loss_cls": 0.56596, "loss_bbox": 0.448, "loss": 1.01395, "time": 0.63168}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00125, "memory": 12221, "data_time": 0.01864, "loss_cls": 0.53338, "loss_bbox": 0.43835, "loss": 0.97173, "time": 0.64693}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00125, "memory": 12221, "data_time": 0.01783, "loss_cls": 0.54108, "loss_bbox": 0.4401, "loss": 0.98118, "time": 0.63019}
{"mode": "val", "epoch": 1, "iter": 2510, "lr": 0.00125, "mAP": 0.13373, "AP50": 0.134}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00125, "memory": 12221, "data_time": 0.07005, "loss_cls": 0.54264, "loss_bbox": 0.43074, "loss": 0.97339, "time": 0.68445}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00125, "memory": 12221, "data_time": 0.01822, "loss_cls": 0.49617, "loss_bbox": 0.42326, "loss": 0.91942, "time": 0.62791}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00125, "memory": 12221, "data_time": 0.01883, "loss_cls": 0.47842, "loss_bbox": 0.40964, "loss": 0.88806, "time": 0.63836}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00125, "memory": 12221, "data_time": 0.01884, "loss_cls": 0.50053, "loss_bbox": 0.40872, "loss": 0.90924, "time": 0.63988}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00125, "memory": 12221, "data_time": 0.01823, "loss_cls": 0.47436, "loss_bbox": 0.41229, "loss": 0.88664, "time": 0.63145}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00125, "memory": 12221, "data_time": 0.01817, "loss_cls": 0.46644, "loss_bbox": 0.40668, "loss": 0.87312, "time": 0.63265}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00125, "memory": 12221, "data_time": 0.01883, "loss_cls": 0.44763, "loss_bbox": 0.39852, "loss": 0.84616, "time": 0.63214}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00125, "memory": 12221, "data_time": 0.01839, "loss_cls": 0.44157, "loss_bbox": 0.40328, "loss": 0.84485, "time": 0.64171}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00125, "memory": 12221, "data_time": 0.01809, "loss_cls": 0.42835, "loss_bbox": 0.39331, "loss": 0.82166, "time": 0.63317}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00125, "memory": 12221, "data_time": 0.01878, "loss_cls": 0.42566, "loss_bbox": 0.39946, "loss": 0.82512, "time": 0.63641}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00125, "memory": 12221, "data_time": 0.01818, "loss_cls": 0.41795, "loss_bbox": 0.39204, "loss": 0.80999, "time": 0.63863}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00125, "memory": 12221, "data_time": 0.01789, "loss_cls": 0.40089, "loss_bbox": 0.38833, "loss": 0.78922, "time": 0.62911}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00125, "memory": 12221, "data_time": 0.01893, "loss_cls": 0.37481, "loss_bbox": 0.38485, "loss": 0.75967, "time": 0.62515}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00125, "memory": 12221, "data_time": 0.01878, "loss_cls": 0.39723, "loss_bbox": 0.38906, "loss": 0.78628, "time": 0.63289}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00125, "memory": 12221, "data_time": 0.01861, "loss_cls": 0.36993, "loss_bbox": 0.37478, "loss": 0.74471, "time": 0.63403}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00125, "memory": 12221, "data_time": 0.01788, "loss_cls": 0.37331, "loss_bbox": 0.38401, "loss": 0.75732, "time": 0.62661}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00125, "memory": 12221, "data_time": 0.01803, "loss_cls": 0.36027, "loss_bbox": 0.37568, "loss": 0.73595, "time": 0.63364}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00125, "memory": 12221, "data_time": 0.01811, "loss_cls": 0.3513, "loss_bbox": 0.37879, "loss": 0.73009, "time": 0.63362}
{"mode": "val", "epoch": 2, "iter": 2510, "lr": 0.00125, "mAP": 0.46271, "AP50": 0.463}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00125, "memory": 12221, "data_time": 0.07031, "loss_cls": 0.3248, "loss_bbox": 0.36307, "loss": 0.68788, "time": 0.69163}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00125, "memory": 12221, "data_time": 0.01811, "loss_cls": 0.33233, "loss_bbox": 0.36575, "loss": 0.69808, "time": 0.63387}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00125, "memory": 12221, "data_time": 0.01785, "loss_cls": 0.34713, "loss_bbox": 0.36367, "loss": 0.7108, "time": 0.63027}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00125, "memory": 12221, "data_time": 0.01776, "loss_cls": 0.32613, "loss_bbox": 0.35538, "loss": 0.68151, "time": 0.62737}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00125, "memory": 12221, "data_time": 0.01863, "loss_cls": 0.31639, "loss_bbox": 0.35404, "loss": 0.67043, "time": 0.63523}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00125, "memory": 12221, "data_time": 0.01808, "loss_cls": 0.3342, "loss_bbox": 0.35491, "loss": 0.6891, "time": 0.63851}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00125, "memory": 12221, "data_time": 0.0187, "loss_cls": 0.30651, "loss_bbox": 0.35761, "loss": 0.66413, "time": 0.64188}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00125, "memory": 12221, "data_time": 0.01846, "loss_cls": 0.30817, "loss_bbox": 0.35225, "loss": 0.66042, "time": 0.62649}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00125, "memory": 12221, "data_time": 0.01805, "loss_cls": 0.30664, "loss_bbox": 0.35488, "loss": 0.66152, "time": 0.63717}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00125, "memory": 12221, "data_time": 0.01779, "loss_cls": 0.30038, "loss_bbox": 0.34991, "loss": 0.65029, "time": 0.62648}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00125, "memory": 12221, "data_time": 0.01773, "loss_cls": 0.28809, "loss_bbox": 0.34287, "loss": 0.63096, "time": 0.62634}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00125, "memory": 12221, "data_time": 0.01802, "loss_cls": 0.29996, "loss_bbox": 0.35003, "loss": 0.64999, "time": 0.63581}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.00125, "memory": 12221, "data_time": 0.01814, "loss_cls": 0.29421, "loss_bbox": 0.33883, "loss": 0.63304, "time": 0.62854}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00125, "memory": 12221, "data_time": 0.01776, "loss_cls": 0.29559, "loss_bbox": 0.34079, "loss": 0.63638, "time": 0.63249}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00125, "memory": 12221, "data_time": 0.01781, "loss_cls": 0.28857, "loss_bbox": 0.33661, "loss": 0.62518, "time": 0.63354}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00125, "memory": 12221, "data_time": 0.01774, "loss_cls": 0.28406, "loss_bbox": 0.3411, "loss": 0.62516, "time": 0.63437}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.00125, "memory": 12221, "data_time": 0.01854, "loss_cls": 0.27571, "loss_bbox": 0.3355, "loss": 0.61121, "time": 0.63712}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.00125, "memory": 12221, "data_time": 0.01787, "loss_cls": 0.27089, "loss_bbox": 0.32969, "loss": 0.60057, "time": 0.63213}
{"mode": "val", "epoch": 3, "iter": 2510, "lr": 0.00125, "mAP": 0.66209, "AP50": 0.662}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00013, "memory": 12221, "data_time": 0.07209, "loss_cls": 0.25369, "loss_bbox": 0.31552, "loss": 0.56921, "time": 0.69081}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00013, "memory": 12221, "data_time": 0.01826, "loss_cls": 0.23937, "loss_bbox": 0.30712, "loss": 0.54649, "time": 0.64031}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.00013, "memory": 12221, "data_time": 0.01877, "loss_cls": 0.23459, "loss_bbox": 0.30401, "loss": 0.5386, "time": 0.63246}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.00013, "memory": 12221, "data_time": 0.01791, "loss_cls": 0.23673, "loss_bbox": 0.30235, "loss": 0.53907, "time": 0.63063}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.00013, "memory": 12221, "data_time": 0.01799, "loss_cls": 0.2384, "loss_bbox": 0.30561, "loss": 0.544, "time": 0.63964}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.00013, "memory": 12221, "data_time": 0.01786, "loss_cls": 0.2289, "loss_bbox": 0.30294, "loss": 0.53184, "time": 0.62698}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.00013, "memory": 12221, "data_time": 0.01801, "loss_cls": 0.22691, "loss_bbox": 0.30269, "loss": 0.5296, "time": 0.632}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.00013, "memory": 12221, "data_time": 0.01802, "loss_cls": 0.22856, "loss_bbox": 0.30458, "loss": 0.53314, "time": 0.63403}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.00013, "memory": 12221, "data_time": 0.01789, "loss_cls": 0.23994, "loss_bbox": 0.30883, "loss": 0.54877, "time": 0.62059}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.00013, "memory": 12221, "data_time": 0.01796, "loss_cls": 0.23266, "loss_bbox": 0.30771, "loss": 0.54037, "time": 0.63115}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.00013, "memory": 12221, "data_time": 0.01776, "loss_cls": 0.23227, "loss_bbox": 0.30763, "loss": 0.53991, "time": 0.62749}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00013, "memory": 12221, "data_time": 0.01798, "loss_cls": 0.23157, "loss_bbox": 0.30738, "loss": 0.53895, "time": 0.64277}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00013, "memory": 12221, "data_time": 0.01879, "loss_cls": 0.23617, "loss_bbox": 0.30858, "loss": 0.54476, "time": 0.64573}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00013, "memory": 12221, "data_time": 0.01849, "loss_cls": 0.23437, "loss_bbox": 0.3058, "loss": 0.54017, "time": 0.62287}
{"mode": "train", "epoch": 4, "iter": 750, "lr": 0.00013, "memory": 12221, "data_time": 0.01792, "loss_cls": 0.22762, "loss_bbox": 0.30265, "loss": 0.53027, "time": 0.63569}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.00013, "memory": 12221, "data_time": 0.01788, "loss_cls": 0.23056, "loss_bbox": 0.30031, "loss": 0.53087, "time": 0.6343}
{"mode": "train", "epoch": 4, "iter": 850, "lr": 0.00013, "memory": 12221, "data_time": 0.01795, "loss_cls": 0.23444, "loss_bbox": 0.30345, "loss": 0.53789, "time": 0.63557}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.00013, "memory": 12221, "data_time": 0.01797, "loss_cls": 0.23314, "loss_bbox": 0.30765, "loss": 0.54079, "time": 0.6339}
{"mode": "val", "epoch": 4, "iter": 2510, "lr": 0.00013, "mAP": 0.71543, "AP50": 0.715}
