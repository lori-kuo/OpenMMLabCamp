2023-02-04 23:08:40,465 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.16 (default, Jan 17 2023, 22:25:28) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: GeForce GTX 1650
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2
NVCC: Cuda compilation tools, release 10.2, V10.2.8
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30139 版
GCC: n/a
PyTorch: 1.13.1+cu116
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1+cu116
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-04 23:08:40,466 - mmcls - INFO - Distributed training: False
2023-02-04 23:08:40,613 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=4,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/peach',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/peach/train.txt',
        classes='data/peach/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/peach',
        ann_file='data/peach/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/peach/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy', metric_options=dict(topk=1))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=10)
work_dir = 'work/resnet18_b32_peach'
gpu_ids = [0]

2023-02-04 23:08:40,617 - mmcls - INFO - Set random seed to 861786327, deterministic: False
2023-02-04 23:08:41,167 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth
2023-02-04 23:08:41,213 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([4, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([4]).
2023-02-04 23:08:41,217 - mmcls - INFO - Start running, host: 郭臣@LAPTOP-K82FN1UV, work_dir: E:\MyProgram\python\openmmlab\mmclassification\work\resnet18_b32_peach
2023-02-04 23:08:41,217 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 23:08:41,219 - mmcls - INFO - workflow: [('train', 1)], max: 10 epochs
2023-02-04 23:08:41,220 - mmcls - INFO - Checkpoints will be saved to E:\MyProgram\python\openmmlab\mmclassification\work\resnet18_b32_peach by HardDiskBackend.
2023-02-04 23:09:11,009 - mmcls - INFO - Epoch [1][100/188]	lr: 1.000e-03, eta: 0:08:48, time: 0.297, data_time: 0.105, memory: 875, loss: 0.7919
2023-02-04 23:09:25,312 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 23:09:36,747 - mmcls - INFO - Epoch(val) [1][13]	accuracy: 92.0000
2023-02-04 23:09:55,277 - mmcls - INFO - Epoch [2][100/188]	lr: 1.000e-04, eta: 0:04:25, time: 0.184, data_time: 0.021, memory: 875, loss: 0.3387
2023-02-04 23:10:09,648 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 23:10:10,951 - mmcls - INFO - Epoch(val) [2][13]	accuracy: 96.2500
2023-02-04 23:10:29,521 - mmcls - INFO - Epoch [3][100/188]	lr: 1.000e-04, eta: 0:03:16, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2986
2023-02-04 23:10:43,854 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 23:10:45,157 - mmcls - INFO - Epoch(val) [3][13]	accuracy: 96.7500
2023-02-04 23:11:03,748 - mmcls - INFO - Epoch [4][100/188]	lr: 1.000e-04, eta: 0:02:35, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2800
2023-02-04 23:11:18,086 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 23:11:19,380 - mmcls - INFO - Epoch(val) [4][13]	accuracy: 97.2500
2023-02-04 23:11:37,951 - mmcls - INFO - Epoch [5][100/188]	lr: 1.000e-04, eta: 0:02:04, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2952
2023-02-04 23:11:52,286 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 23:11:53,574 - mmcls - INFO - Epoch(val) [5][13]	accuracy: 97.5000
2023-02-04 23:12:12,181 - mmcls - INFO - Epoch [6][100/188]	lr: 1.000e-04, eta: 0:01:38, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2599
2023-02-04 23:12:26,521 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 23:12:27,816 - mmcls - INFO - Epoch(val) [6][13]	accuracy: 97.7500
2023-02-04 23:12:46,372 - mmcls - INFO - Epoch [7][100/188]	lr: 1.000e-04, eta: 0:01:14, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2496
2023-02-04 23:13:00,719 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 23:13:02,008 - mmcls - INFO - Epoch(val) [7][13]	accuracy: 98.0000
2023-02-04 23:13:20,568 - mmcls - INFO - Epoch [8][100/188]	lr: 1.000e-04, eta: 0:00:52, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2248
2023-02-04 23:13:34,909 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 23:13:36,204 - mmcls - INFO - Epoch(val) [8][13]	accuracy: 97.7500
2023-02-04 23:13:54,764 - mmcls - INFO - Epoch [9][100/188]	lr: 1.000e-04, eta: 0:00:30, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2424
2023-02-04 23:14:09,135 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 23:14:10,424 - mmcls - INFO - Epoch(val) [9][13]	accuracy: 97.7500
2023-02-04 23:14:29,001 - mmcls - INFO - Epoch [10][100/188]	lr: 1.000e-04, eta: 0:00:09, time: 0.185, data_time: 0.021, memory: 875, loss: 0.2420
2023-02-04 23:14:43,418 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 23:14:44,722 - mmcls - INFO - Epoch(val) [10][13]	accuracy: 97.7500
